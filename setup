#!/usr/bin/env bash

# Variables
green='\033[1;32m'
yellow='\033[1;33m'
blue='\033[1;34m'
nocolor='\033[0m'
dotfiles=`find . -type f -name ".*" -maxdepth 1`
dotfiledirs=`find . -maxdepth 1 -type d -not -iwholename "*.git" -not -wholename "."`
homedir=${HOME}"/"
dir=$(pwd)

# Functions
function ascii() {
    echo -e "${blue}${@}${nocolor}"
}

function log() {
    echo -e "\n${green}${@}${nocolor}"
}

function info() {
    echo -e "${blue}${@}${nocolor}"
}

function warning() {
    echo -e "\n⇏ ${yellow}${@}${nocolor}"
}

function brewski() {
    info "   ├─ Brewing ${@}"
    brew install "${@}"
}

function installcask() {
    info "   ├─ Casking ${@}"
    brew cask install "${@}" 2> /dev/null
}

# Start Magic
if test ! $(which brew); then
    log "Installing Brew ✈ ✈ ✈"
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
else
    warning "Brew already installed"
fi

log "Updating Brew ..."
brew update
brew upgrade

log "Installing Brew Binaries ..."
brewski ack
brewski diff-so-fancy
brewski git
brewski git-extras
brewski n
brewski ncdu
brewski wget
brewski hub
brewski htop
brewski go
brew tap phinze/homebrew-cask
brewski brew-cask
brewski ios_webkit_debug_proxy
brewski memcached
brewski mvn
brewski selenium-server
brewski ruby

log "Install Node Latest and Stable"
n latest
n stable

log "Casking OSX Software ..."
installcask adium-beta
installcask dropbox
installcask evernote
installcask expan-drive
installcask google-chrome
installcask firefox
installcask imagealpha
installcask imageoptim
installcask iterm2
installcask sublime-text3
installcask skype
installcask the-unarchiver
installcask virtualbox

log "Cleanup Brew ..."
brew cleanup

log "Installing Global NPM Packages ..."
npm install grunt-cli eslint eslint-plugin-react db-migrate pkgcount nodemon depcheck http-server mocha -g

log "Linking Sublime Text CLI"
if test ! $(which subl); then
    ln -s "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl" /usr/local/bin
else
    warning "Sublime Text CLI already installed"
fi

log "Checking for ZSH ..."

if [ -d ~/.oh-my-zsh ]; then
    warning "You already have Oh My Zsh installed."
else
    log "Installing ZSH ..."
    git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
    chsh -s `which zsh`
    /usr/bin/env zsh
fi

log "Adding zsh_local for overrides"
if [ ! -e ~/.zsh_local ]; then
    touch ~/.zsh_local
fi

log "Copying [dot]files|dirs ..."

mkdir -p ~/dotfiles_old

for file in $dotfiles; do
    file=${file//.\/}

    # Skip if it's already a symlink
    if ! [ -L $homedir$file ]; then

        if [ -f $homedir$file ]; then
            warning "Backup $file ~ to ~/dotfiles_old"
            mv ~/$file ~/dotfiles_old/
        fi

        info "   ├─ Linking $file to ~"
        ln -s $dir/$file ~/$file
    fi
done

for dotdir in $dotfiledirs; do
    dotdir=${dotdir//.\/}

    # Skip if it's already a symlink
    if ! [ -d $homedir$dotdir ]; then

        if [ -f $homedir$dotdir ]; then
            warning "Backup $dir ~ to ~/dotfiles_old"
            mv ~/$dotdir ~/dotfiles_old/
        fi

        info "   ├─ Linking $dotdir to ~"
        ln -s $dir/$dotdir ~/$dotdir
    fi
done

ascii "
        ______   _______  __    _  _______
       |      | |       ||  |  | ||       |
       |  _    ||   _   ||   |_| ||    ___|
       | | |   ||  | |  ||       ||   |___
       | |_|   ||  |_|  ||  _    ||    ___|
       |       ||       || | |   ||   |___
       |______| |_______||_|  |__||_______|
      "

# Remove functions
unset log
unset info
unset warning
unset installcask
unset brewski
unset ascii
